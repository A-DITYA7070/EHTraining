Access Control :- Access control is the application of constraints on who or what is authorized to perform actions or access resources. 
                  In the context of web applications, access control is dependent on authentication and session management.


    Authentication confirms that the user is who they say they are.
    Session management identifies which subsequent HTTP requests are being made by that same user.
    Access control determines whether the user is allowed to carry out the action that they are attempting to perform.

Broken access controls are common and often present a critical security vulnerability. Design and management of access controls is a 
complex and dynamic problem that applies business, organizational, and legal constraints to a technical implementation. Access control 
design decisions have to be made by humans so the potential for errors is high. 

Vertical access controls
Vertical access controls are mechanisms that restrict access to sensitive functionality to specific types of users.
With vertical access controls, different types of users have access to different application functions. For example, an administrator 
might be able to modify or delete any user's account, while an ordinary user has no access to these actions. Vertical access controls 
can be more fine-grained implementations of security models designed to enforce business policies such as separation of duties and least privilege. 

Horizontal access controls
Horizontal access controls are mechanisms that restrict access to resources to specific users.
With horizontal access controls, different users have access to a subset of resources of the same type. For example, a banking application 
will allow a user to view transactions and make payments from their own accounts, but not the accounts of any other user. 

Context-dependent access controls
Context-dependent access controls restrict access to functionality and resources based upon the state of the application or the user's 
interaction with it.Context-dependent access controls prevent a user performing actions in the wrong order. For example, a retail website 
might prevent users from modifying the contents of their shopping cart after they have made payment. 


=== >> Broken access control vulnerabilities exist when a user can access resources or perform actions that they are not supposed to be able to. 

Vertical privilege escalation
If a user can gain access to functionality that they are not permitted to access then this is vertical privilege escalation. 
For example, if a non-administrative user can gain access to an admin page where they can delete user accounts, then this 
is vertical privilege escalation. 

Unprotected functionality
At its most basic, vertical privilege escalation arises where an application does not enforce any protection for sensitive 
functionality. For example, administrative functions might be linked from an administrator's welcome page but not from a user's 
welcome page. However, a user might 
be able to access the administrative functions by browsing to the relevant admin URL.

For example, a website might host sensitive functionality at the following URL:
https://insecure-website.com/admin

This might be accessible by any user, not only administrative users who have a link to the functionality in their user interface. 
In some cases, the administrative URL might be disclosed in other locations, such as the robots.txt file:
https://insecure-website.com/robots.txt
Even if the URL isn't disclosed anywhere, an attacker may be able to use a wordlist to brute-force the location of the sensitive functionality. 

 In some cases, sensitive functionality is concealed by giving it a less predictable URL. This is an example of so-called "security by obscurity".
However, hiding sensitive functionality does not provide effective access control because users might discover the obfuscated URL in a number of ways.
Imagine an application that hosts administrative functions at the following URL:
https://insecure-website.com/administrator-panel-yb556
This might not be directly guessable by an attacker. However, the application might still leak the URL to users. The URL might be disclosed 
in JavaScript that constructs the user interface based on the user's role: 



Access-control vulnerabalities :::---

Authentication :- it means identifies the user and confirms that they are who they say are.
Session management :- It identifies which subsequent HTTP requests are being made by each user.
Access Control :- It determines whether the user is allowed to carry out the action that they are attempting to perform

==> Types of access control ::--
i) vertical access control :- It is used to restrict access to functions not available for other user in the organisation..
ii) Horizontal access control :- It enables different users to access similar resources types.
iii) context dependent access control :- It restricts access to functionality and resources based on the state of the application 
                                         or the user's interaction with it.
                                         ex :- if u confirmed the payment u cannot access the shopping cart.

==> Broken Access Control :-- these are the vulnerabalities that arise when users can act outside of their intended permissions. This typically
                              leads to sensative info disclosure, unauthorised access and modification or destruction of data.

                           ex :- i) regular user is able to perform the functionalities of priviledged users.
                                ii) regular user is able to access the info/account of other regular users
                               iii) user is able to ineract with the application (because app is not maintaining state) 
                                    ex :- user is able to change the shopping cart items even after payment is confirmed.

Types of Broken Access Control :::---
i) Horizontal Privilege Escalation :- Horizontal privilege escalation occurs when an attacker gains access to resources belonging
                                      to another user of the same privilege level.
                          ex :- let alice is logged into an application :-
                                https://vulnerable-web.com/myaccount?id=123
                                let an attacker is also logged into the application so what he will do is 
                                (he will bruteforce the account_id and will change the id to 123)
                                https://vulnerable-web.com/myaccount?id=123
                                and thus he can access the account of alice and he can compromise the whole account 
                          it is vulnerable because the app is relying on client side inputs
                          ==> this is horizontal privilege escalation 

ii) Vertical privilege Escalation :- it occurs when an attacker gains access to privileged functionality that they are not permitted to access
                            => let app has diff user roles 
                            let admin url :- https://vulnerable-web.com/login/home.js?admin=true
                            so attacker will only need to change the admin from false to true 
                            and he can thus get access to admin's account... and can compromise the whole app

iii) Access Control Vulnerabalities in Multi-Step Processes :- These types of vulnerabalities occurs when access control rules are implemented
                              on some of the steps but ignored on others.


OTHER ACCESS CONTROL EXAMPLES ::::::-------------------
=> Bypassing access control checks by modifying parameters in the urls or HTML PAGE.
=> Accessing the API with missing access controls on the POST,PUT and DELETE methods.
=> Manipulating metadata, such as replaying or tampering with JSON Web Tokens (JWTs) or a cookie.
=> Exploiting CORS misconfig that allow API access from unauthorized/untrusted origins.
=> Force browsing to authenticated pages as an unauthenticated user.

UNAUTHORISED ACCESS TO AN APPLICATION ::--
a) Confidentiality :- Access to other user's data.
b) Integrity :- Access to update other user's data.
c) Availability :- Access to delete users.
=> can sometimes be chained with other vulnerabalities to gain remote code execution on the host os.

HOW TO FIND ACCESS-CONTROL-VULNERABALITIES :::-
i) Black Box PenTesting ::-- 
   a) map the application
    => identify all instances where the web app appears to be interacting with the underlying os.
    => Understand how access control is implemented for each privilege level.
    => Manipulate parameters that are potentially used to make access control decisions in the backend
    => Automate testing using extensions like Autorize

ii) White Box testing :-
   => Review the code to identify how access control is implemented in the app
   => system defaults to open
   => weak or missing access control checks on functions/resources.
   => missing access control rules for POST,PUT and DELETE methods at the API level.
   => Relying solely on client-side input to perform access-control desicions.
   => Validate potential access control vulnerabalities on a running application

HOW TO PREVENT ACCESS CONTROL VULNERABALITIES ::-
=> Use a security-centric design where access is verified first and ensure all requests go through an access control check.
=> Except for public resources,deny access by default 
=> Apply the principle of least privilege throughtout the entire application.
=> consider using attribute or feature-based access control checks instead of role-based access-control (depends on type of application)
=> Access control checks should always be performed on server side..







