

1. Exploiting unrestricted file uploads to deploy a web shell.
From a security perspective, the worst possible scenario is when a website allows you to upload server-side scripts, such as PHP, Java, or 
Python files, and is also configured to execute them as code. This makes it trivial to create your own web shell on the server.


Web shell
A web shell is a malicious script that enables an attacker to execute arbitrary commands on a remote web server simply by sending HTTP requests 
to the right endpoint.

If you're able to successfully upload a web shell, you effectively have full control over the server. This means you can read and write arbitrary
files, exfiltrate sensitive data, even use the server to pivot attacks against both internal infrastructure and other servers outside the network.
For example, the following PHP one-liner could be used to read arbitrary files from the server's filesystem:
<?php echo file_get_contents('/path/to/target/file'); ?>

Once uploaded, sending a request for this malicious file will return the target file's contents in the response. 

A more versatile web shell may look something like this:
<?php echo system($_GET['command']); ?>
This script enables you to pass an arbitrary system command via a query parameter as follows:
GET /example/exploit.php?command=id HTTP/1.1

EXPLOITING FLAWED VALIDATIONS OF FILE UPLOADS :::---

1. Flawed file type validation

When submitting HTML forms, the browser typically sends the provided data in a POST request with the content type
application/x-www-form-url-encoded. This is fine for sending simple text like your name or address. However, 
it isn't suitable for sending large amounts of binary data, such as an entire image file or a PDF document. In 
this case, the content type multipart/form-data is preferred.

Consider a form containing fields for uploading an image, providing a description of it, and entering your username. 
Submitting such a form might result in a request that looks something like this:
POST /images HTTP/1.1
    Host: normal-website.com
    Content-Length: 12345
    Content-Type: multipart/form-data; boundary=---------------------------012345678901234567890123456
    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="image"; filename="example.jpg"
    Content-Type: image/jpeg
    [...binary content of example.jpg...]
    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="description"
    This is an interesting description of my image.
    ---------------------------012345678901234567890123456
    Content-Disposition: form-data; name="username"
    wiener
    ---------------------------012345678901234567890123456--
As you can see, the message body is split into separate parts for each of the form's inputs. Each part contains a 
Content-Disposition header, which provides some basic information about the input field it relates to. These individual 
parts may also contain their own Content-Type header, which tells the server the MIME type of the data that was submitted 
using this input.

One way that websites may attempt to validate file uploads is to check that this input-specific Content-Type header matches an 
expected MIME type. If the server is only expecting image files, for example, it may only allow types like image/jpeg and image/png.
Problems can arise when the value of this header is implicitly trusted by the server. If no further validation is performed to check
whether the contents of the file actually match the supposed MIME type, this defense can be easily bypassed using tools like Burp 
Repeater. 

==> Preventing file execution in user-accessible directories..

While it's clearly better to prevent dangerous file types being uploaded in the first place, the second line of defense is to stop 
the server from executing any scripts that do slip through the net.
As a precaution, servers generally only run scripts whose MIME type they have been explicitly configured to execute. Otherwise, 
they may just return some kind of error message or, in some cases, serve the contents of the file as plain text instead: 

GET /static/exploit.php?command=id HTTP/1.1
    Host: normal-website.com
    HTTP/1.1 200 OK
    Content-Type: text/plain
    Content-Length: 39
    <?php echo system($_GET['command']); ?>

This behavior is potentially interesting in its own right, as it may provide a way to leak source code, but it nullifies any attempt to 
create a web shell.
This kind of configuration often differs between directories. A directory to which user-supplied files are uploaded will likely have much 
stricter controls than other locations on the filesystem that are assumed to be out of reach for end users. If you can find a way to upload 
a script to a different directory that's not supposed to contain user-supplied files, the server may execute your script after all. 

NOTE :- Web servers often use the filename field in multipart/form-data requests to determine the name and location where the file should be saved. 


==> Insufficient blacklisting of dangerous file types
One of the more obvious ways of preventing users from uploading malicious scripts is to blacklist potentially dangerous file extensions 
like .php. The practice of blacklisting is inherently flawed as it's difficult to explicitly block every possible file extension that
could be used to execute code. Such blacklists can sometimes be bypassed by using lesser known, alternative file extensions that may 
still be executable, such as .php5, .shtml, and so on. 

==> Overriding the server configuration
As we discussed in the previous section, servers typically won't execute files unless they have been configured to do so. For example,
before an Apache server will execute PHP files requested by a client, developers might have to add the following directives to their 
/etc/apache2/apache2.conf file:
LoadModule php_module /usr/lib/apache2/modules/libphp.so
    AddType application/x-httpd-php .php

Many servers also allow developers to create special configuration files within individual directories in order to override or add to one 
or more of the global settings. Apache servers, for example, will load a directory-specific configuration from a file called .htaccess if 
one is present.

Similarly, developers can make directory-specific configuration on IIS servers using a web.config file. This might include directives such as
the following, which in this case allows JSON files to be served to users:
<staticContent>
    <mimeMap fileExtension=".json" mimeType="application/json" />
    </staticContent>

Web servers use these kinds of configuration files when present, but you're not normally allowed to access them using HTTP requests. However, 
you may occasionally find servers that fail to stop you from uploading your own malicious configuration file. In this case, even if the file 
extension you need is blacklisted, you may be able to trick the server into mapping an arbitrary, custom file extension to an executable MIME
type. 

















