
What is a CSP ?
CSP stands for Content Security Policy which is a mechanism to define which resources can be fetched out or executed by a web page. 
In other words, it can be understood as a policy that decides which scripts, images, iframes can be called or executed on a particular 
page from different locations. Content Security Policy is implemented via response headers or meta elements of the HTML page. From there,
it’s browser’s call to follow that policy and actively block violations as they are detected.

Why it is used?
Content Security Policy is widely used to secure web applications against content injection like cross-site scripting attacks. 
Also by using CSP the server can specify which protocols are allowed to be used. Can we think CSP as mitigation of XSS? The answer
is no! CSP is an extra layer of security against content injection attacks. The first line of defense is output encoding and input
validation always. A successful CSP implementation not only secures a web page against these vulnerabilities but also gives a wide 
range of attack details that were unsuccessful i.e. blocked by CSP itself. Web admin can be benefitted using this feature to spot a
potential bug.

How does it work?
CSP works by restricting the origins that active and passive content can be loaded from. It can additionally restrict certain aspects 
of active content such as the execution of inline JavaScript, and the use of eval().
If you are a developer you will require to define all allowed origins for every type of resource your website utilizes. Suppose you 
are the owner of a website abc.com and these websites loads multiple resources like scripts, images, css from localhost, and different
sources as well, say allowed.com. A very basic policy would be :

Content-Security-policy:
                 default-src 'self'; 
                 script-src 'self' allowed.com; 
                 img-src 'self' allowed.com; 
                 style-src 'self';

<meta http-equiv="Content-Security-Policy" content="default-src 'self'; img-src https://*; child-src 'none';">

directives of csp :- 
script-src : This directive specifies allowed sources for JavaScript. This includes not only URLs loaded directly into <script> elements,
             but also things like inline script event handlers (onclick) and XSLT stylesheets which can trigger script execution.
default-src: This directive defines the policy for fetching resources by default. When fetch directives are absent in CSP header the browser
             follows this directive by default.
Child-src: This directive defines allowed resources for web workers and embedded frame contents.
connect-src: This directive restricts URLs to load using interfaces like <a>,fetch,websocket,XMLHttpRequest
frame-src: This directive restricts URLs to which frames can be called out.
frame-ancestors: This directive specifies the sources that can embed the current page. This directive applies to <frame>,
                 <iframe>, <embed>, and <applet> tags. This directive can't be used in <meta> tags and applies only to non-HTML resources.
img-src: It defines allowed sources to load images on the web page.
Manifest-src: This directive defines allowed sources of application manifest files.
media-src: It defines allowed sources from where media objects like <audio>,<video> and <track> can be loaded.
object-src: It defines allowed sources for the <object>,<embed> and <applet> elements.
base-uri: It defines allowed URLs which can be loaded using <base> element.
form-action: This directive lists valid endpoints for submission from <form> tags.
plugin-types: It defineslimits the kinds of mime types a page may invoke.
upgrade-insecure-requests: This directive instructs browsers to rewrite URL schemes, changing HTTP to HTTPS. This directive can be useful
                           for websites with large numbers of old URL's that need to be rewritten.
sandbox: sandbox directive enables a sandbox for the requested resource similar to the <iframe> sandbox attribute. It applies restrictions 
         to a page's actions including preventing popups, preventing the execution of plugins and scripts, and enforcing a same-origin policy.



Sources: Sources are nothing but the defined directives values. Below are some common sources that are used to define the value of the above 
         directives.

 * : This allows any URL except data: blob: filesystem: schemes
self : This source defines that loading of resources on the page is  allowed from the same domain.
data: This source allows loading resources via the data scheme (eg Base64 encoded images)
none: This directive allows nothing to be loaded from any source.
unsafe-eval : This allows the use of eval() and similar methods for creating code from strings. This is not a safe practice to include 
             this source in any directive. For the same reason it is named as unsafe. 
unsafe-hashes: This allows to enable specific inline event handlers.
unsafe-inline: This allows the use of inline resources, such as inline <script> elements, javascript: URLs, inline event handlers, 
               and inline <style> elements. Again this is not recommended for security reasons.
nonce: A whitelist for specific inline scripts using a cryptographic nonce (number used once). The server must generate a unique nonce value 
       each time it transmits a policy.


EXAMPLE ::--
Content-Security-Policy: default-src 'self'; script-src https://bhaveshthakur.com; report-uri /Report-parsing-url;
<img src=image.jpg> This image will be allowed as image is loading from same domain i.e. bhaveshthakur.com
<script src=script.js> This script will be allowed as the script is loading from the same domain i.e. bhaveshthakur.com
<script src=https://evil.com/script.js> This script will not-allowed as the script is trying to load from undefined domain i.e. evil.com
"/><script>alert(1337)</script> This will not-allowed on the page. 
But why? Because inline-src is set to self. But Wait! where the hell it is mentioned? I can't see inline-src defined in above CSP at all.
The answer is have you noticed default-src 'self'? So even other directives are not defined but they will be following default-src 
directive value only. Below is the list of directives which will follow default-src value even though they are not defined in the policy:
child-src connect-src font-src frame-src img-src manifest-src
media-src object-src prefetch-src script-src script-src-elem
script-src-attr style-src style-src-elem style-src-attr worker-src


We have a fair understanding of content security policy directives and its resources. There is one more important thing we need to know. 
Whenever CSP restricts any invalid source to load data it can report about the incident to website administrators if below directive is 
defined in the policy:
Content-Security-Policy: default-src 'self'; img-src https://*; child-src 'none'; report-uri /Report-parsing-url;


Administrators can track which kind of attack scripts or techniques are used by attackers to load malicious content from untrusted resources.
Now, let's move to the interesting part Bypassing Techniques:
Analyze the CSP policy properly. There are few online tools that are very helpful.
1. https://csp-evaluator.withgoogle.com/
2. https://cspvalidator.org/









