FILE PATH DISCLOSURE ::-
  The application discloses absolute internal file paths. These file paths can be revealed in the client-side source-code utilized by the application,
  or as parameters passed within the application. This information gives an attacker details about the operating system used by the server or developer,
  and may also give an attacker additional details on what technologies the application utilizes. An attacker would be able to use this information to 
  limit attacks and techniques to those technologies used by the application which could make it easier to find and exploit a vulnerability.
  
  Remediation
  Remove any reference to absolute file paths that can be revealed client-side.

SERVER PATH DISCLOSURE ::-
   The application discloses an internal path on the server, possibly through a GET or POST parameter, client-side source code (including HTML comments), 
   or an error message.

Consequence 
  Exposing server paths to the user may allow an attacker to determine the server's file system structure, operating system, or technology stack. 
  An attacker can use this information to research known vulnerabilities and more efficiently target attacks against the affected technologies.

Remediation
  Remove references to server paths that are revealed on the client side. References revealed through application-level resources, such as HTML comments, 
  source code, or application errors (stack traces), should be removed from client-side code and handled properly on the server side. Server-level references 
  revealing path information, such as default error messages from the web server, should be configured to present custom error pages without revealing 
  path information.


Steps to Reproduce
Server Path Disclosure - Case: Internal Server Error
1. Configure your browser to use a local proxy tool such as Burp Suite.
2. Log in to the application.
3. Follow the functional path: $navigational_flow$
4. Turn on the Intercept in Burp.
5. Fill the form with required data and click the "Submit" button.
6. In Burp, send the intercepted request to Burp Repeater.
7. Modify the value of the parameter "$parameter_name$" to the following payload and then click the "Send" button:

$payload$
Observe the response in Burp Repeater. Note that the server returns an internal server error response disclosing an internal path on the server.
Captions
The application discloses an internal path on the server.
Parameters
$navigational_flow$
The navigation steps required to reach the vulnerable component.
$parameter_name$
Name of the parameter to modify
$payload$
The payload to inject to cause the error that reveals the server path

Server Path Disclosure - Case: URL Parameter
1. Configure your browser to use a local proxy tool such as Burp Suite.
2. Log in to the application.
3. Follow the functional path: $navigational_flow$.
4. Review the proxy history for the last request. Observe the parameter "$parameter_name$" in the URL which points to the file path from 
   where the file is retrieved.
Captions
The application discloses an internal path on the server.


FULL PATH DISCLOSURE ::::----
Full Path Disclosure (FPD) vulnerabilities enable the attacker to see the path to the webroot/file. e.g.: /home/omg/htdocs/file/. 
Certain vulnerabilities, such as using the load_file() (within a SQL Injection) query to view the page source, require the attacker 
to have the full path to the file they wish to view.

Risk Factors
The risks regarding FPD may produce various outcomes. For example, if the webroot is getting leaked, attackers may abuse the 
knowledge and use it in combination with file inclusion vulnerabilites (see PHP File Inclusion) to steal configuration files 
regarding the web application or the rest of the operating system.

Warning: session_start() [function.session-start]: The session id contains illegal characters,
valid characters are a-z, A-Z, 0-9 and '-,' in /home/example/public_html/includes/functions.php on line 2
In combination with, say, unproteced use of the PHP function file_get_contents, the attacker gets an opportunity to steal configuration files.

The sourcecode of index.php:

<?php
   echo file_get_contents(getcwd().$_GET['page']);
?>
An attacker crafts a URL like so: http://example.org/index.php?page=../../../../../../../home/example/public_html/includes/config.php with 
the knowledge of the FPD in combination with Relative Path Traversal.

The leaked sourcecode of config.php:

<?php
   //Hidden configuration file containing database credentials.
   $hostname = 'localhost';
   $username = 'root';
   $password = 'owasp_fpd';
   $database = 'example_site';
   $connector = mysql_connect($hostname, $username, $password);
   mysql_select_db($database, $connector);
?>
Disregarding the above sample, FPD can also be used to reveal the underlaying operation system by observing the file paths. 
Windows for instance always start with a drive-letter, e.g; C:\, while Unix based operating system tend to start with a single front slash.

*NIX:

Warning: session_start() [function.session-start]: The session id contains illegal characters,
valid characters are a-z, A-Z, 0-9 and '-,' in /home/alice/public_html/includes/functions.php on line 2
Microsoft Windows:

Warning: session_start() [function.session-start]: The session id contains illegal characters,
valid characters are a-z, A-Z, 0-9 and '-,' in C:\Users\bob\public_html\includes\functions.php on line 2
The FPD may reveal a lot more than people normally might suspect. The two examples above reveal usernames on the operating systems
as well; “alice” and “bob”. Usernames are of course important pieces of credentials. Attackers can use those in many different ways,
ranging all from bruteforcing over various protocols (SSH, Telnet, RDP, FTP…) to launching exploits requiring working usernames.

Examples
Empty Array

If we have a site that uses a method of requesting a page like this:

http://example.org/index.php?page=about
We can use a method of opening and closing braces that causes the page to output an error. This method would look like this:

http://example.org/index.php?page[]=about
This renders the page defunct thus spitting out an error:

Warning: opendir(Array): failed to open dir: No such file or directory in /home/omg/htdocs/index.php on line 84
Warning: pg_num_rows(): supplied argument ... in /usr/home/example/html/pie/index.php on line 131
Null Session Cookie

Another popular and very reliable method of producing errors containing a FPD is to give the page a nulled session using JavaScript 
Injections. A simple injection using this method would look something like so:

javascript:void(document.cookie="PHPSESSID=");
By simply setting the PHPSESSID cookie to nothing (null) we get an error.

Warning: session_start() [function.session-start]: The session id contains illegal characters,
valid characters are a-z, A-Z, 0-9 and '-,' in /home/example/public_html/includes/functions.php on line 2
This vulnerability is prevented simply by turning error reporting off so your code does not spit out errors.

error_reporting(0);
Errors can contain useful information for site owner so instead of disabling the error reporting at all, it is possible to only 
hide errors from output by display_errors.

Invalid Session Cookie

As a complement to the Null Session Cookie, a very long session could also produce an error containing FPD. This could also be accomplished 
using a JavaScript injection like so:

javascript:void(document.cookie='PHPSESSID=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
By simply setting the PHPSESSID cookie to 129 bytes or more, PHP may spit out a warning.

Another approach would be to to set the PHPSESSID cookie data to one of the reserved bytes.

javascript:void(document.cookie='PHPSESSID=.');
Both variants result in the following.

Warning: session_start(): The session id is too long or contains illegal characters,
valid characters are a-z, A-Z, 0-9 and '-,' in /home/example/public_html/includes/functions.php on line 2
The same remedy as for Null Session Cookie may be applied here. Errors may be hidden from the output by display_errors.

Direct Access to files that requires preloaded library files

Web application developers sometimes fail to add safe checks in files that requires preloaded library/function files. This is prone to reveal 
possible sensitive information when those applications’ URLs are directly requested. Sometimes, it’s a clue to Local File Inclusion vulnerability.

Concerning with Mambo CMS, if we access to a direct url, http://example.org/mambo/mambots/editors/mostlyce/jscripts/tiny_mce/plugins/spellchecker/classes/PSpellShell.php, then we gets

<br />
<b>Fatal error</b>:  Class 'SpellChecker' not found in <b>/home/victim/public_html/mambo/mambots/editors/mostlyce/jscripts/tiny_mce/plugins/spellchecker/classes/PSpellShell.php</b> on line <b>9</b><br />


WHAT TO LOOK FOR ::-
Triage scan results indicating file path disclosure
Review application code visible to the client, including html and javascript files.

Check if directory browsing is enabled.
Review error messages that could reveal detailed information like full path disclosure. Errors associated with file upload functionality are 
a good place to look.
Examples of what file path disclosures might look like:
/home/omg/htdocs/file/
C:\Users\test\public_html\includes\functions.php

Do not report this finding, if:
1. The path being referenced is actually a URL, rather than a file path.
2. The path is a relative path or URL rewriting is used by the server.
3. The path disclosed were from documentation/help pages intended to be used by the user.
4. The path disclosed is actually a local path on your machine (during file upload).























