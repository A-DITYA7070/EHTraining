1) onerror event :- 
  The onerror event is an event handler attribute in HTML and JavaScript that is triggered when an error occurs during the 
  loading of an external resource, such as an image, script, or stylesheet. This event provides a way to handle errors gracefully 
   within your web application.
  The onerror event handler can be attached to various HTML elements that load external resources, such as <img>, 
  <script>, <link>, etc. When an error occurs while loading the specified resource, the function assigned to the onerror
  attribute is executed.
  <img src="image.jpg" onerror="alert('Failed to load image!');">
  The onerror event is particularly useful for gracefully handling situations where external resources may fail to load, providing fallbacks, 
  logging errors, or informing users about the issue. It helps improve the user experience by giving developers the ability to respond to 
  errors in a controlled manner.


HOW TO PREVENT COOKIE STEALING :-
1) set-cookie attribute to httpOnly :- this attribute means that cookie and other information stored can not be accessed by client
                                       side scripts.
2) sameSite :- this attribute controls when cookies are sent in cross-origin requests. It is often useful when website is interacting
               with 3rd party domain/websites.
               sameSite attributes (strict,lax,none)
               a) strict :- strict means cookie will only be sent along with req originating from same src/origin
               b) lax :- cookies will be sent to 3rd party only if they are safe, safe means they are using Http POST
                         option methods where user data is not get exposed
                         this is often useful when dealing with 3rd party authentication
               c) none :- cookies will be sent along with all cross site req (this is vulnerable) we should report this case.

==> How to find and test Reflected XSS vulnerabilities
Majority of Reflected XSS bugs can be found by the use of automation tools such as Burp Suite Pro Vulnerability Scanner, Nuclei, Dalfox, 
QuickXSS among many others.

There are several steps that are involved in testing for Reflected XSS vulnerabilities:

Test Every Point — Test separately every entry point for data within the application’s HTTP requests. 
This includes parameters or other data within the URL query string and message body, and the URL file path. 
It also includes HTTP headers, although XSS-like behavior that can only be triggered via certain HTTP headers may not be exploitable in practice.

Submit Random Aphanumeric Values — For each entry point, submit a unique random value and determine whether the value is reflected in the response. 
The value should be designed to survive most input validation, so needs to be fairly short and contain only alphanumeric characters. 
But it needs to be long enough to make accidental matches within the response highly unlikely. A random alphanumeric 
value of around 8 characters is normally ideal.

Determine The Reflection Context — For each location within the response where the random value is reflected, determine its context. 
This might be in text between HTML tags, within a tag attribute which might be quoted, within a JavaScript string, etc.

Test A Candidate Payload — Based on the context of the reflection, test an initial candidate XSS payload that will trigger 
JavaScript execution if it is reflected unmodified within the response. The easiest way to test payloads is to send the request to Burp Repeater, 
modify the request to insert the candidate payload, issue the request, and then review the response to see if the payload worked. 
An efficient way to work is to leave the original random value in the request and place the candidate XSS payload before or after it. 
Then set the random value as the search term in Burp Repeater’s response view. Burp will highlight each location where the search term appears, 
letting you quickly locate the reflection.

Test Alternative Payloads — If the candidate XSS payload was modified by the application, or blocked altogether, then you will need to 
test alternative payloads and techniques that might deliver a working XSS attack based on the context of the reflection and the type of input 
validation that is being performed.

Test The Attack In a Browser — Finally, if you succeed in finding a payload that appears to work within Burp Repeater, transfer 
the attack to a real browser (by pasting the URL into the address bar, or by modifying the request in Burp Proxy’s intercept view, 
and see if the injected JavaScript is indeed executed. Often, it is best to execute some simple JavaScript like alert(document.domain) 
which will trigger a visible popup within the browser if the attack succeeds.



=====>>>>>  Exploitation of Reflected XSS Vulnerabilities

~ Reflected XSS bugs can be exploited to steal cookies, capture passwords and perform CSRF as shown below:

Ø Exploiting Reflected XSS to steal cookies.

~ Stealing cookies is a traditional way to exploit XSS. Most web applications use cookies for session handling. You can exploit cross-site scripting vulnerabilities to send the victim’s cookies to your own domain, then manually inject the cookies into your browser and impersonate the victim.

~ This approach is limited to:

a. Victim might not be logged in.

b. Many applications hide cookies from their JavaScript using the HttpOnly flag.

c. Sessions might be locked to additional factors like the user’s IP address.

d. Session might time-out before you’re able to hijack it.

Ø Exploiting Reflected XSS to capture passwords

~ These days, many users have password managers that auto-fill their passwords. You can take advantage of this by creating a password input, 
reading out the auto-filled password, and sending it to your own domain. This technique avoids most of the problems associated with stealing 
cookies, and can even gain access to every other account where the victim has reused the same password.

~ The primary disadvantage of this technique is that it only works on users who have a password manager that performs password auto-fill. 
(Of course, if a user doesn’t have a password saved you can still attempt to obtain their password through an on-site phishing attack, but 
it’s not quite the same.)

Ø Exploiting Reflected XSS to perform CSRF

Anything a legitimate user can do on a web site, you can probably do too with XSS. Depending on the site you’re targeting, 
you might be able to make a victim send a message, accept a friend request, commit a backdoor to a source code repository, or transfer some Bitcoin.
Some websites allow logged-in users to change their email address without re-entering their password. 
If you’ve found an XSS vulnerability, you can make it trigger this functionality to change the victim’s email 
address to one that you control, and then trigger a password reset to gain access to the account.
10. Mitigation of Reflected XSS vulnerabilities
First and foremost, from the user’s point-of-view, vigilance is the best way to avoid XSS scripting. Specifically, 
this means not clicking on suspicious links which may contain malicious code. Suspicious links include those found in:
a)Emails from unknown senders
b)A website’s comments section
c)Social media feed of unknown users
Another measure is taken by the website operator to prevent potential abuse to their users by:
d)Usage of (WAFs) Web Application Firewalls.
e)Sanitization of data input.
