
The target of an HTTP request is called a "resource", whose nature isn't defined further; it can be a document, a photo, or anything else. 

Each resource is identified by a Uniform Resource Identifier (URI) used throughout HTTP for identifying resources.

URLs and URNs
URLs:- 
The most common form of URI is the Uniform Resource Locator (URL), which is known as the web address.
A URL is composed of different parts, some mandatory and others optional.
ex :- http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument

URNs
A Uniform Resource Name (URN) is a URI that identifies a resource by name in a particular namespace.
ex:- 
urn:isbn:9780141036144
urn:ietf:rfc:7230

Scheme or protocol
Protocol
http:// is the protocol. It indicates which protocol the browser must use. Usually it is the HTTP protocol or its secured version, 
HTTPS. The Web requires one of these two, but browsers also know how to handle other protocols such as mailto: (to open a mail client) 
or ftp: to handle a file transfer. 

Common schemes are:
Scheme	        Description
data	          Data URLs
file	          Host-specific file names
ftp	            File Transfer Protocol
http/https	    Hyper text transfer protocol (Secure)
javascript	    URL-embedded JavaScript code
mailto	        Electronic mail address
ssh	            Secure shell
tel	            telephone
urn	            Uniform Resource Names
view-source	    Source code of the resource

Authority
Domaine Name
www.example.com is the domain name or authority that governs the namespace. It indicates which Web server is being requested. 
Alternatively, it is possible to directly use an IP address, but because it is less convenient, it is not often used on the Web.

Port
:80 is the port in this instance. It indicates the technical "gate" used to access the resources on the web server. 
It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) 
to grant access to its resources. Otherwise, it is mandatory

Path
Path to the file
/path/to/myfile.html is the path to the resource on the Web server. In the early days of the Web, a path like this 
represented a physical file location on the Web server. Nowadays, it is mostly an abstraction handled by Web servers 
without any physical reality.

Query
Parameters
?key1=value1&key2=value2 are extra parameters provided to the Web server. Those parameters are a list of 
key/value pairs separated with the & symbol. The Web server can use those parameters to do extra stuff 
before returning the resource to the user. Each Web server has its own rules regarding parameters, and 
the only reliable way to know how a specific Web server is handling parameters is by asking the Web server owner.

Fragment
Anchor
#SomewhereInTheDocument is an anchor to another part of the resource itself. An anchor represents a sort of "bookmark" 
inside the resource, giving the browser the directions to show the content located at that "bookmarked" spot. On an HTML 
document, for example, the browser will scroll to the point where the anchor is defined; on a video or audio document, 
the browser will try to go to the time the anchor represents. It is worth noting that the part after the #, also known as 
the fragment identifier, is never sent to the server with the request.

Usage notes
When using URLs in HTML content, you should generally only use a few of these URL schemes. When referring to subresources — 
that is, files that are being loaded as part of a larger document — you should only use the HTTP and HTTPS schemes. 
Increasingly, browsers are removing support for using FTP to load subresources, for security reasons.

FTP is still acceptable at the top level (such as typed directly into the browser's URL bar, or the target of a link), 
although some browsers may delegate loading FTP content to another application


Data URLs :- 

Data URLs, URLs prefixed with the data: scheme, allow content creators to embed small files inline in documents. They were formerly known 
as "data URIs" until that name was retired by the WHATWG.

Note: Data URLs are treated as unique opaque origins by modern browsers, rather than inheriting the origin of the 
settings object responsible for the navigation.

Syntax
Data URLs are composed of four parts: a prefix (data:), a MIME type indicating the type of data, 
an optional base64 token if non-textual, and the data itself:

data:[<mediatype>][;base64],<data>
The mediatype is a MIME type string, such as 'image/jpeg' for a JPEG image file. If omitted, defaults to text/plain;charset=US-ASCII

If the data contains characters defined in RFC 3986 as reserved characters, or contains space characters, 
newline characters, or other non-printing characters, those characters must be URL encoded.

If the data is textual, you can embed the text (using the appropriate entities or escapes based on the 
enclosing document's type). Otherwise, you can specify base64 to embed base64-encoded binary data.You can find more info on MIME types here and here.

A few examples:

data:,Hello%2C%20World%21
The text/plain data Hello, World!. Note how the comma is URl encoded as %2C, and the space character as %20.

data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==
base64-encoded version of the above

data:text/html,%3Ch1%3EHello%2C%20World%21%3C%2Fh1%3E
An HTML document with <h1>Hello, World!</h1>

data:text/html,%3Cscript%3Ealert%28%27hi%27%29%3B%3C%2Fscript%3E
An HTML document with <script>alert('hi');</script> that executes a JavaScript alert. Note that the closing script tag is required.

Encoding data into base64 format
Base64 is a group of binary-to-text encoding schemes that represent binary data in an ASCII string 
format by translating it into a radix-64 representation. By consisting only of ASCII characters, base64 
strings are generally url-safe, and that's why they can be used to encode data in Data URLs.

Encoding in JavaScript
The Web APIs have native methods to encode or decode to base64: Base64.

Encoding on a Unix system
Base64 encoding of a file or string on Linux and macOS systems can be achieved using the command-line 
base64 (or, as an alternative, the uuencode utility with -m argument).

BASH
Copy to Clipboard
echo -n hello|base64
# outputs to console: aGVsbG8=

echo -n hello>a.txt
base64 a.txt
# outputs to console: aGVsbG8=

base64 a.txt>b.txt
# outputs to file b.txt: aGVsbG8=
Encoding on Microsoft Windows
On Windows, Convert.ToBase64String from PowerShell can be used to perform the Base64 encoding:

[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("hello"))
# outputs to console: aGVsbG8=
Alternatively, a GNU/Linux shell (such as WSL) provides the utility base64:

BASH
Copy to Clipboard
bash$ echo -n hello | base64
# outputs to console: aGVsbG8=
Common problems
This section describes problems that commonly occur when creating and using data URLs.

HTML
Copy to Clipboard
data:text/html,lots of text…<p><a name%3D"bottom">bottom</a>?arg=val</p>
This represents an HTML resource whose contents are:

HTML
Copy to Clipboard
lots of text…
<p><a name="bottom">bottom</a>?arg=val</p>
Syntax
The format for data URLs is very simple, but it's easy to forget to put a comma before the "data" segment, or 
to incorrectly encode the data into base64 format.

Formatting in HTML
A data URL provides a file within a file, which can potentially be very wide relative to the width of the enclosing document. 
As a URL, the data should be formattable with whitespace (linefeed, tab, or spaces), but there are practical issues that arise 
when using base64 encoding.

Length limitations
Browsers are not required to support any particular maximum length of data. For example, the Opera 11 browser limited URLs 
to 65535 characters long which limits data URLs to 65529 characters (65529 characters being the length of the encoded data,
not the source, if you use the plain data:, without specifying a MIME type). Firefox version 97 and newer supports data URLs
of up to 32MB (before 97 the limit was close to 256MB). Chromium objects to URLs over 512MB, and Webkit (Safari) to URLs over 2048MB.

Lack of error handling
Invalid parameters in media, or typos when specifying 'base64', are ignored, but no error is provided.

No support for query strings, etc.
The data portion of a data URL is opaque, so an attempt to use a query string (page-specific parameters, with the syntax 
<url>?parameter-data) with a data URL will just include the query string in the data the URL represents.

Security issues
A number of security issues (for example, phishing) have been associated with data URLs, and navigating to them in the browser's top level. 
To mitigate such issues, top-level navigation to data: URLs is blocked in all modern browsers. See this blog post from the Mozilla 
Security Team for more details.
