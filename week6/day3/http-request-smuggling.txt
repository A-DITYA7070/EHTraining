
                                               HTTP Request Smuggling ::--

Request smuggling is primarily assosiated with HTTP 1 server but HTTP/2 can be also vulnerable depending upon how the backend has been impelemented.

Today's web applications frequently employ chains of HTTP servers between users and the ultimate application logic. Users send requests to a 
front-end server (sometimes called a load balancer or reverse proxy) and this server forwards requests to one or more back-end servers. This 
type of architecture is increasingly common, and in some cases unavoidable, in modern cloud-based applications.

When the front-end server forwards HTTP requests to a back-end server, it typically sends several requests over the same back-end network connection,
because this is much more efficient and performant. The protocol is very simple; HTTP requests are sent one after another, and the receiving server 
has to determine where one request ends and the next one begins:
Forwarding HTTP requests to a back-end server.


In this situation, it is crucial that the front-end and back-end systems agree about the boundaries between requests. Otherwise, an 
attacker might be able to send an ambiguous request that gets interpreted differently by the front-end and back-end systems:
Smuggling an HTTP request to a back-end server.

Here, the attacker causes part of their front-end request to be interpreted by the back-end server as the start of the next request. 
It is effectively prepended to the next request, and so can interfere with the way the application processes that request. This is a 
request smuggling attack, and it can have devastating results. 


Most HTTP request smuggling vulnerabilities arise because the HTTP/1 specification provides two different ways to specify where a request ends:
the Content-Length header and the Transfer-Encoding header.

The Content-Length header is straightforward: it specifies the length of the message body in bytes. For example: 

Most HTTP request smuggling vulnerabilities arise because the HTTP/1 specification provides two different ways to specify where a request ends:
the Content-Length header and the Transfer-Encoding header.

The Content-Length header is straightforward: it specifies the length of the message body in bytes. For example: 


The Transfer-Encoding header can be used to specify that the message body uses chunked encoding. This means that the message body contains 
one or more chunks of data. Each chunk consists of the chunk size in bytes (expressed in hexadecimal), followed by a newline, followed by 
the chunk contents. The message is terminated with a chunk of size zero. For example:
POST /search HTTP/1.1
Host: normal-website.com
Content-Type: application/x-www-form-urlencoded
Transfer-Encoding: chunked
b
q=smuggling
0


Many security testers are unaware that chunked encoding can be used in HTTP requests, for two reasons:
i)  Burp Suite automatically unpacks chunked encoding to make messages easier to view and edit.
ii) Browsers do not normally use chunked encoding in requests, and it is normally seen only in server responses.



As the HTTP/1 specification provides two different methods for specifying the length of HTTP messages, it is possible for a single message 
to use both methods at once, such that they conflict with each other. The specification attempts to prevent this problem by stating that if
both the Content-Length and Transfer-Encoding headers are present, then the Content-Length header should be ignored. This might be sufficient
to avoid ambiguity when only a single server is in play, but not when two or more servers are chained together. In this situation, problems 
can arise for two reasons:

I)  Some servers do not support the Transfer-Encoding header in requests.
II) Some servers that do support the Transfer-Encoding header can be induced not to process it if the header is obfuscated in some way.


If the front-end and back-end servers behave differently in relation to the (possibly obfuscated) Transfer-Encoding header, then they 
might disagree about the boundaries between successive requests, leading to request smuggling vulnerabilities.
Note

Websites that use HTTP/2 end-to-end are inherently immune to request smuggling attacks. As the HTTP/2 specification introduces a single, 
robust mechanism for specifying the length of a request, there is no way for an attacker to introduce the required ambiguity.

However, many websites have an HTTP/2-speaking front-end server, but deploy this in front of back-end infrastructure that only supports HTTP/1. 
This means that the front-end effectively has to translate the requests it receives into HTTP/1. This process is known as HTTP downgrading. 


PERFORMING REQUEST SMUGGLING ATTACK ::--
Classic request smuggling attacks involve placing both the Content-Length header and the Transfer-Encoding header into a single HTTP/1 
request and manipulating these so that the front-end and back-end servers process the request differently. The exact way in which this is 
done depends on the behavior of the two servers:

i)     CL.TE: the front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header.
ii)    TE.CL: the front-end server uses the Transfer-Encoding header and the back-end server uses the Content-Length header.
iii)   TE.TE: the front-end and back-end servers both support the Transfer-Encoding header, but one of the servers can be induced
       not to process it by obfuscating the header in some way.



                                              I) CL.TE vulnerabilities
Here, the front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header. We can perform 
a simple HTTP request smuggling attack as follows:
POST / HTTP/1.1
Host: vulnerable-website.com
Content-Length: 13
Transfer-Encoding: chunked
0
SMUGGLED

The front-end server processes the Content-Length header and determines that the request body is 13 bytes long, up to the end of SMUGGLED. 
This request is forwarded on to the back-end server.

The back-end server processes the Transfer-Encoding header, and so treats the message body as using chunked encoding. It processes the first
chunk, which is stated to be zero length, and so is treated as terminating the request. The following bytes, SMUGGLED, are left unprocessed,
and the back-end server will treat these as being the start of the next request in the sequence. 






















