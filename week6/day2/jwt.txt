
JWT :- JSONWEBTOKEN :- 
JSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain 
any kind of data, but are most commonly used to send information ("claims") about users as part of authentication, session handling, and access 
control mechanisms.

Unlike with classic session tokens, all of the data that a server needs is stored client-side within the JWT itself. This makes JWTs a popular choice 
for highly distributed websites where users need to interact seamlessly with multiple back-end servers. 

A JWT consists of 3 parts: a header, a payload, and a signature.

The header and payload parts of a JWT are just base64url-encoded JSON objects. The header contains metadata about the token itself, while 
the payload contains the actual "claims" about the user. 

JWT signature
The server that issues the token typically generates the signature by hashing the header and payload. In some cases, they also encrypt the
resulting hash. Either way, this process involves a secret signing key. This mechanism provides a way for servers to verify that none of the 
data within the token has been tampered with since it was issued:

As the signature is directly derived from the rest of the token, changing a single byte of the header or payload results in a mismatched 
signature. Without knowing the server's secret signing key, it shouldn't be possible to generate the correct signature for a given header or payload.


JWTs aren't really used as a standalone entity. The JWT spec is extended by both the JSON Web Signature (JWS) and JSON Web Encryption (JWE) 
specifications, which define concrete ways of actually implementing JWTs.

In other words, a JWT is usually either a JWS or JWE token. When people use the term "JWT", they almost always mean a JWS token. JWEs are very similar, 
except that the actual contents of the token are encrypted rather than just encoded. 

What are JWT attacks?
JWT attacks involve a user sending modified JWTs to the server in order to achieve a malicious goal. Typically, this goal is to bypass authentication
and access controls by impersonating another user who has already been authenticated. 


What is the impact of JWT attacks?
The impact of JWT attacks is usually severe. If an attacker is able to create their own valid tokens with arbitrary values, they may be able to escalate 
their own privileges or impersonate other users, taking full control of their accounts


How do vulnerabilities to JWT attacks arise?
JWT vulnerabilities typically arise due to flawed JWT handling within the application itself. The various specifications related to JWTs are
relatively flexible by design, allowing website developers to decide many implementation details for themselves. This can result in them accidentally 
introducing vulnerabilities even when using battle-hardened libraries.

These implementation flaws usually mean that the signature of the JWT is not verified properly. This enables an attacker to tamper with the 
values passed to the application via the token's payload. Even if the signature is robustly verified, whether it can truly be trusted relies
heavily on the server's secret key remaining a secret. If this key is leaked in some way, or can be guessed or brute-forced, an attacker can
generate a valid signature for any arbitrary token, compromising the entire mechanism. 

