web-cache posioning :-

constructing a basic web cache poisoning attack involves the following steps:

    a) Identify and evaluate unkeyed inputs
    b) Elicit a harmful response from the back-end server
    c) Get the response cached


i) Identify and evaluate unkeyed inputs
    Any web cache poisoning attack relies on manipulation of unkeyed inputs, such as headers. Web caches ignore unkeyed inputs when deciding whether to serve a cached response to
    the user. This behavior means that you can use them to inject your payload and elicit a "poisoned" response which, if cached, will be served to all users whose requests have 
    the matching cache key. Therefore, the first step when constructing a web cache poisoning attack is identifying unkeyed inputs that are supported by the server.
    You can identify unkeyed inputs manually by adding random inputs to requests and observing whether or not they have an effect on the response. This can be obvious, such as 
    reflecting the input in the response directly, or triggering an entirely different response. However, sometimes the effects are more subtle and require a bit of detective 
    work to figure out. You can use tools such as Burp Comparer to compare the response with and without the injected input, but this still involves a significant amount of manual effort. 

ii) Param Miner
    Fortunately, you can automate the process of identifying unkeyed inputs by adding the Param Miner extension to Burp from the BApp store. To use Param Miner, you simply right-click 
    on a request that you want to investigate and click "Guess headers". Param Miner then runs in the background, sending requests containing different inputs from its extensive, 
    built-in list of headers. If a request containing one of its injected inputs has an effect on the response, Param Miner logs this in Burp, either in the "Issues" pane if you are 
    using Burp Suite Professional, or in the "Output" tab of the extension ("Extensions" > "Installed" > "Param Miner" > "Output") if you are using Burp Suite Community Edition.
    For example, in the following screenshot, Param Miner found an unkeyed header X-Forwarded-Host on the home page of the website: 

iii) Elicit a harmful response from the back-end server
    Once you have identified an unkeyed input, the next step is to evaluate exactly how the website processes it. Understanding this is essential to successfully eliciting a harmful 
    response. If an input is reflected in the response from the server without being properly sanitized, or is used to dynamically generate other data, then this is a potential entry
    point for web cache poisoning. 

iv) Get the response cached
    Manipulating inputs to elicit a harmful response is half the battle, but it doesn't achieve much unless you can cause the response to be cached, which cansometimes be tricky.
    Whether or not a response gets cached can depend on all kinds of factors, such as the file extension, content type, route, status code, and response headers. You will
    probably need to devote some time to simply playing around with requests on different pages and studying how the cache behaves. Once you work out how to get a response
    cached that contains your malicious input, you are ready to deliver the exploit to potential victims. 


                                              *******************         Exploiting cache design flaws      ***************************

i) Using web cache poisoning to deliver an XSS attack
  => Perhaps the simplest web cache poisoning vulnerability to exploit is when unkeyed input is reflected in a cacheable response without proper sanitization. 

ex :- 

REQUEST :-
GET /en?region=uk HTTP/1.1
Host: innocent-website.com
X-Forwarded-Host: innocent-website.co.uk

RESPONSE :-
HTTP/1.1 200 OK
Cache-Control: public
<meta property="og:image" content="https://innocent-website.co.uk/cms/social.png" />

Here the website url sent in X-Forwarded-Host is getting displayed in ui without proper sanitisation .

hence we can exploit by simply adding a xss payload 
ex :-
Request :-
GET /en?region=uk HTTP/1.1
Host: innocent-web.com
X-Forwarded-Host: <script>alert(1)</script>

Response 
HTTP/1.1 200 OK
Cache-Control: public
<meta property="og:image" content=<script>alert(1)</script> />


NOTE ::-
If this response was cached, all users who accessed /en?region=uk would be served this XSS payload. This example simply causes an alert
to appear in the victim's browser,
but a real attack could potentially steal passwords and hijack user accounts.Using web cache poisoning to exploit cookie-handling vulnerabilities

II) 

Cookies are often used to dynamically generate content in a response. A common example might be a cookie that indicates the user's prefer
language, which is then used to load the corresponding version of the page:
GET /blog/post.php?mobile=1 HTTP/1.1
Host: innocent-website.com
User-Agent: Mozilla/5.0 Firefox/57.0
Cookie: language=pl;
Connection: close


III)

Using multiple headers to exploit web cache poisoning vulnerabilities
Some websites are vulnerable to simple web cache poisoning exploits, as demonstrated above. However, others require more sophisticated attacks and 
only become vulnerable when an attacker is able to craft a request that manipulates multiple unkeyed inputs.
For example, let's say a website requires secure communication using HTTPS. To enforce this, if a request that uses another protocol is received, 
the website dynamically generates a redirect to itself that does use HTTPS: 

